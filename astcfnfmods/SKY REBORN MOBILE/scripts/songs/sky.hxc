import funkin.play.song.Song;
import funkin.play.PlayState;
import funkin.save.Save;
import funkin.modding.base.ScriptedFlxSpriteGroup;
import openfl.filters.ShaderFilter;
import funkin.graphics.shaders.OverlayBlend;
import funkin.graphics.shaders.DropShadowScreenspace;
import flixel.FlxCamera;
import flixel.FlxG;
import funkin.graphics.shaders.AdjustColorShader;
import funkin.Conductor;
import flixel.math.FlxPoint;
import flixel.util.FlxTimer;
import funkin.graphics.adobeanimate.FlxAtlasSprite;
import funkin.modding.base.ScriptedFlxAtlasSprite;
import funkin.play.stage.Stage;
import funkin.graphics.FunkinSprite;
import flixel.tweens.FlxEase;
import flixel.tweens.FlxTween;
import flixel.FlxSprite;
import funkin.audio.FunkinSound;
import flixel.FlxCamera;
import funkin.play.PlayStatePlaylist;
import funkin.util.MathUtil;
import funkin.modding.base.ScriptedFlxRuntimeShader;
import funkin.util.FileUtil;
import funkin.play.cutscene.VideoCutscene;
import funkin.play.cutscene.CutsceneType;
import funkin.play.character.CharacterDataParser;
import funkin.play.character.CharacterType;
import funkin.play.components.HealthIcon;

class SkySong extends Song {
	// cutscene stuff
	var hasPlayedEndingCutscene:Bool;
	var hasPlayedVideoCutscene:Bool;
	// for a scrapped concept
	var skyChatbox:FlxSprite;
	var bfChatbox:FlxSprite;
	// for the vignette
	var borderScale = 0.7;
	var angerAmount = 0.05;
	var angryVignette:FlxSprite;
	var vAlpha = 0;
	var angerTime = 0.5;

	// var camHUD:FlxCamera;
	public function new() {
		super('sky');
		// this makes sure stuff  doesnt glitch when restartin the song
		hasPlayedEndingCutscene = false;
		hasPlayedVideoCutscene = false;
	}

	function onCreate() {
		super.onCreate();

		if (!PlayStatePlaylist.isStoryMode) {
			hasPlayedVideoCutscene = true;
			hasPlayedEndingCutscene = true;
		}
		hasPlayedVideoCutscene = false;
		hasPlayedEndingCutscene = false;
		skyChatbox = new FlxSprite().loadGraphic(Paths.image('shift/fx/skyChatbox'));
		skyChatbox.updateHitbox();
		skyChatbox.x = 400;
		skyChatbox.frames = Paths.getSparrowAtlas('shift/fx/skyChatbox');
		skyChatbox.animation.addByPrefix('idle', 'sky chatbox', 24, true);
		skyChatbox.animation.play('idle');
		skyChatbox.scale.set(1, 1);
		skyChatbox.scrollFactor.set(1.1, 1.1);
		skyChatbox.angle = 0;
		skyChatbox.alpha = 0;
		skyChatbox.zIndex = 250;

		bfChatbox = new FlxSprite().loadGraphic(Paths.image('shift/fx/bfChatbox'));
		bfChatbox.updateHitbox();
		bfChatbox.x = 500;
		bfChatbox.y = 160;
		bfChatbox.frames = Paths.getSparrowAtlas('shift/fx/bfChatbox');
		bfChatbox.animation.addByPrefix('idle', 'boyfriend chatbox', 24, true);
		bfChatbox.animation.play('idle');
		bfChatbox.scale.set(1, 1);
		bfChatbox.scrollFactor.set(1.1, 1.1);
		bfChatbox.angle = 0;
		bfChatbox.alpha = 0;
		bfChatbox.zIndex = 250;
		PlayState.instance.add(bfChatbox);
		PlayState.instance.add(skyChatbox);

		angryVignette = new FunkinSprite(0, 0).loadGraphic(Paths.image('shift/fx/angryVignette'));
		angryVignette.updateHitbox();
		angryVignette.flipX = true;
		angryVignette.blend = 0;
		angryVignette.alpha = 0;
		angryVignette.cameras = [PlayState.instance.camHUD];
		angryVignette.scale.set(borderScale * 3, borderScale);
		angryVignette.screenCenter();
		angryVignette.y += 20;
		PlayState.instance.add(angryVignette);

		// secret skin implementation
		if (PlayState.instance.currentVariation == 'erect') {
			isAltSkin = true;
			PlayState.instance.currentStage.getDad().destroy();
			character = CharacterDataParser.fetchCharacter("skyyandere");
			PlayState.instance.currentStage.addCharacter(character, CharacterType.DAD);
			PlayState.instance.currentStage.refresh();
		}
	}

	// create cutscene when song starts
	function onSongRetry(event:ScriptEvent) {
		super.onSongRetry(event);

		hasPlayedEndingCutscene = true;
	}

	// start cutscene
	public override function onSongEnd(event:CountdownScriptEvent):Void {
		super.onSongEnd(event);

		if (!hasPlayedEndingCutscene && PlayStatePlaylist.isStoryMode) {
			hasPlayedEndingCutscene = true;

			event.cancel();

			// start the video cutscene and hide it so the other stuff can happen after
			startEndingCutscene();
		} else {
			// Make sure the cutscene can play again next time!
			hasPlayedEndingCutscene = false;
			// DO NOT CANCEL THE EVENT!
		}
	}

	// stuff that happens in said cutscene
	function startEndingCutscene() {
		var bfPos:Array<Float> = [
			PlayState.instance.currentStage.getBoyfriend().cameraFocusPoint.x,
			PlayState.instance.currentStage.getBoyfriend().cameraFocusPoint.y
		];
		var gfPos:Array<Float> = [
			PlayState.instance.currentStage.getGirlfriend().cameraFocusPoint.x,
			PlayState.instance.currentStage.getGirlfriend().cameraFocusPoint.y
		];
		var skyPos:Array<Float> = [
			PlayState.instance.currentStage.getDad().cameraFocusPoint.x,
			PlayState.instance.currentStage.getDad().cameraFocusPoint.y
		];
		var cutsceneDelay:Float = 0;
		var transformSfx:FunkinSound;
		transformSfx = FunkinSound.load(Paths.sound("skyTransformSound2"), false, false);
		transformSfx.volume = 1;

		var laser:FlxSprite;
		laser = new FlxSprite().loadGraphic(Paths.image('shift/manifest/manifestLaser'));
		laser.updateHitbox();
		laser.x = 210;
		laser.frames = Paths.getSparrowAtlas('shift/manifest/manifestLaser');
		laser.animation.addByPrefix('idle', 'gaster laser', 24, true);
		laser.animation.play('idle');
		laser.scale.set(2, 4);
		laser.angle = 0;
		laser.zIndex = 50;

		var gradient:FlxSprite;
		gradient = new FlxSprite().loadGraphic(Paths.image('shift/manifest/manifestGradientDouble'));
		gradient.updateHitbox();
		gradient.x = 210;
		gradient.scale.set(3, 1);
		gradient.angle = 0;
		gradient.alpha = 0;
		gradient.zIndex = 500;
		gradient.blend = 0;

		var bgSprite = new FunkinSprite(0, 0);
		bgSprite.makeSolidColor(2000, 2500, 0xFF000000);
		bgSprite.cameras = [PlayState.instance.camCutscene]; // Show over the HUD but below the video.
		// this
		bgSprite.zIndex = 10000;
		bgSprite.alpha = 0;

		PlayState.instance.add(bgSprite);

		PlayState.instance.refresh();

		new FlxTimer().start(1, function(tmr) {
			PlayState.instance.tweenCameraToPosition(skyPos[0] - 200, skyPos[1] + 75, 0.5, FlxEase.quartOut);
			PlayState.instance.tweenCameraZoom(1.2, 2, true, FlxEase.quartOut);
			PlayState.instance.currentStage.getDad().playAnimation('manifesting', true, true);
			PlayState.instance.currentStage.getBoyfriend().playAnimation('react', true, true);
			PlayState.instance.currentStage.getGirlfriend().playAnimation('react', true, true);
			PlayState.instance.refresh();
			transformSfx.play(false);
		});

		new FlxTimer().start(2.3, function(tmr) {
			PlayState.instance.currentStage.getNamedProp('pinkWorld').alpha = 0;
			PlayState.instance.currentStage.getNamedProp('boyfriendCutout').alpha = 0;
			PlayState.instance.currentStage.getNamedProp('blurryCutout').alpha = 0;
			FlxTween.tween(gradient, {alpha: 1}, 1);

			PlayState.instance.currentStage.add(laser);
			PlayState.instance.currentStage.add(gradient);
			PlayState.instance.currentStage.refresh();
			FlxG.camera.shake(0.02, 6);
			PlayState.instance.tweenCameraZoom(1, 2, true, FlxEase.expoOut);
		});
		new FlxTimer().start(5, function(tmr) {
			FlxTween.tween(bgSprite, {alpha: 1}, 2);
		});
		new FlxTimer().start(8, function(tmr) {
			PlayState.instance.endSong(true);
		});
	}

	function onCountdownStart(event:CountdownScriptEvent):Void {
		// making the gradient go away when u restart the song

		if (!hasPlayedVideoCutscene && !hasPlayedEndingCutscene && PlayStatePlaylist.isStoryMode) {
			trace('Pausing countdown to play v1deo cutscene');

			hasPlayedVideoCutscene = true;

			event.cancel(); // CANCEL THE COUNTDOWN!

			startVideo();
		}

		vAlpha = 0;
		angryVignette.alpha = 0;
		if (!PlayStatePlaylist.isStoryMode) {
			hasPlayedVideoCutscene = true;
			hasPlayedEndingCutscene = true;
		}
	}

	function startVideo() {
		VideoCutscene.play(Paths.videos('skyCutscene'));
	}

	function onUpdate() {
		vAlpha = angryVignette.alpha;
	}

	override function onBeatHit(event) {
		super.onBeatHit(event);
		curBeat = event.beat;
		if (PlayState.instance.currentVariation == 'default') {
			switch (event.beat) {
				// vignette stuff

				case 30:
					FlxTween.tween(angryVignette, {alpha: vAlpha + angerAmount}, angerTime);

				case 62:
					FlxTween.tween(angryVignette, {alpha: vAlpha + angerAmount}, angerTime);
				case 94:
					FlxTween.tween(angryVignette, {alpha: vAlpha + angerAmount}, angerTime);
				case 126:
					FlxTween.tween(angryVignette, {alpha: vAlpha + angerAmount}, angerTime);
				case 158:
					FlxTween.tween(angryVignette, {alpha: vAlpha + angerAmount}, angerTime);
				case 190:
					FlxTween.tween(angryVignette, {alpha: vAlpha + angerAmount}, angerTime);
				case 228:
					FlxTween.tween(angryVignette, {alpha: vAlpha + angerAmount}, angerTime);
				case 254:
					FlxTween.tween(angryVignette, {alpha: vAlpha + angerAmount}, angerTime);
				case 286:
					FlxTween.tween(angryVignette, {alpha: vAlpha + (angerAmount * 4)}, angerTime);
			}
		}
	}
}
