import funkin.play.song.Song;
import funkin.play.PlayState;
import funkin.save.Save;
import funkin.modding.base.ScriptedFlxSpriteGroup;
import openfl.filters.ShaderFilter;
import funkin.graphics.shaders.OverlayBlend;
import funkin.graphics.shaders.DropShadowScreenspace;
import flixel.FlxCamera;
import flixel.FlxG;
import funkin.graphics.shaders.AdjustColorShader;
import funkin.Conductor;
import flixel.math.FlxPoint;
import funkin.graphics.adobeanimate.FlxAtlasSprite;
import funkin.modding.base.ScriptedFlxAtlasSprite;
import funkin.play.stage.Stage;
import funkin.audio.FunkinSound;
import funkin.graphics.FunkinSprite;
import flixel.tweens.FlxEase;
import flixel.tweens.FlxTween;
import flixel.FlxCamera;
import funkin.play.PlayStatePlaylist;
import flixel.util.FlxTimer;
import funkin.util.MathUtil;
import funkin.modding.base.ScriptedFlxRuntimeShader;
import funkin.util.FileUtil;
import funkin.play.cutscene.VideoCutscene;
import funkin.modding.module.ModuleHandler;
import funkin.play.cutscene.CutsceneType;
import funkin.play.PlayState;
import funkin.play.event.SongEvent;
import funkin.play.character.CharacterDataParser;
import funkin.play.character.CharacterType;
import funkin.play.components.HealthIcon;
import funkin.modding.PolymodHandler;

class WifeForeverSong extends Song {
	var gradientBorder:FlxSprite;
	var wifeBorder:FlxSprite;
	var borderScale = 0.55;
	var curBeat = 0;
	var hasPlayedInGameCutscene:Bool;

	var targetAlpha = 0;
	var camBorder;

	// cutscene stuff
	var hasPlayedCutscene:Bool;
	var bgSprite:FunkinSprite;
	var bfCanDance = false;

	// Falling Candy Stuff.
	var candyEnabled = false;
	var candyGradient;

	// bf candy anim stuff
	// var camHUD:FlxCamera;
	public function new() {
		super('wife-forever');
		hasPlayedInGameCutscene = false;
	}


	function onCreate() {
		super.onCreate();

		hasPlayedCutscene = false;

		if (PlayState.instance.currentVariation == 'default') {
			candyGradient = new FunkinSprite(0, 0).loadGraphic(Paths.image('shift/lollipopGradient'));
			candyGradient.cameras = [PlayState.instance.camHUD];
			candyGradient.blend = 0;
			candyGradient.alpha = 0;
			FlxG.state.add(candyGradient);
		}

		if (PlayState.instance.currentVariation == 'erect') {
			candyGradient = new FunkinSprite(0, 0).loadGraphic(Paths.image('shift/tacoGradient'));
			candyGradient.cameras = [PlayState.instance.camHUD];
			candyGradient.blend = 0;
			candyGradient.alpha = 0;
			FlxG.state.add(candyGradient);
		}

		gradientBorder = new FunkinSprite(0, 0).loadGraphic(Paths.image('shift/fx/borderGradient'));
		gradientBorder.updateHitbox();
		gradientBorder.blend = 0;
		gradientBorder.cameras = [PlayState.instance.camHUD];
		gradientBorder.setGraphicSize(FlxG.width, FlxG.height);
		gradientBorder.screenCenter();
		PlayState.instance.add(gradientBorder);

		wifeBorder = new FunkinSprite(0, 0).loadGraphic(Paths.image('shift/fx/wifeBorder'));
		wifeBorder.updateHitbox();
		wifeBorder.flipX = true;
		wifeBorder.cameras = [PlayState.instance.camHUD];
		wifeBorder.frames = Paths.getSparrowAtlas("shift/fx/wifeBorder");
		wifeBorder.animation.addByPrefix('idle', 'love bored instance 1', 24, true, true);
		wifeBorder.animation.play('idle', true);
		wifeBorder.scale.set(borderScale * 1.15, borderScale);
		wifeBorder.screenCenter();
		wifeBorder.y -= 3;
		PlayState.instance.add(wifeBorder);

		camBorder = new FlxCamera();
		camBorder.bgColor = 0x00000000;
		FlxG.cameras.add(camBorder, false);
		camBorder.alpha = 0;

		gradientBorder.cameras = [camBorder];
		wifeBorder.cameras = [camBorder];
		
		if (PlayState.instance.currentVariation == 'erect') {
			isAltSkin = true;
			PlayState.instance.currentStage.getDad().destroy();
			character = CharacterDataParser.fetchCharacter("skypajamas");
			PlayState.instance.currentStage.addCharacter(character, CharacterType.DAD);
			PlayState.instance.currentStage.refresh();
		}

		// angle bug fix possibly
	}

	function introCutscene() {
		var bfPos:Array<Float> = [
			PlayState.instance.currentStage.getBoyfriend().cameraFocusPoint.x,
			PlayState.instance.currentStage.getBoyfriend().cameraFocusPoint.y
		];
		var gfPos:Array<Float> = [
			PlayState.instance.currentStage.getGirlfriend().cameraFocusPoint.x,
			PlayState.instance.currentStage.getGirlfriend().cameraFocusPoint.y
		];
		var skyPos:Array<Float> = [
			PlayState.instance.currentStage.getDad().cameraFocusPoint.x,
			PlayState.instance.currentStage.getDad().cameraFocusPoint.y
		];

		// PlayState.instance.currentStage.getDad().playAnimation('dazed', true);
		PlayState.instance.tweenCameraToPosition(bfPos[0], bfPos[1], 0, FlxEase.quadInOut);
		PlayState.instance.tweenCameraZoom(1.2, 0, true, FlxEase.quadInOut);
		FlxTween.tween(PlayState.instance.camHUD, {alpha: 0}, 0.01);

		// commenting out the OLD cutscene code for a NEW one
		// new FlxTimer().start(0.1, function(tmr)
		// {
		// 	PlayState.instance.tweenCameraToPosition(skyPos[0] - 100, skyPos[1] + 300, 0);
		//     FlxTween.tween(bgSprite, { alpha: 0}, 2, {startDelay: 0.3}, function(){bgSprite.visible = false;});
		// 	PlayState.instance.tweenCameraZoom(1.2, 0, true, FlxEase.quadInOut);

		// });
		// new FlxTimer().start(0.11, function(tmr)
		// {
		// 	PlayState.instance.tweenCameraToPosition(skyPos[0] , skyPos[1] , 5, FlxEase.quadOut);
		//     FunkinSound.playOnce(Paths.sound("dizzyCartoonySfx"), 1.0);
		//     PlayState.instance.tweenCameraZoom(0.8, 5, true, FlxEase.quadOut);
		// });
		// new FlxTimer().start(4, function(tmr)
		// {
		//     PlayState.instance.startCountdown();
		// });

		new FlxTimer().start(0.1, function(tmr) {
			FlxTween.tween(PlayState.instance.camHUD, {alpha: 1}, 2);
			PlayState.instance.tweenCameraToPosition(skyPos[0], skyPos[1], 2, FlxEase.sineInOut);
			FlxTween.tween(bgSprite, {alpha: 0}, 1.4, {startDelay: 0.3}, function() {
				bgSprite.visible = false;
			});
			PlayState.instance.tweenCameraZoom(0.6, 2, true, FlxEase.sineInOut);
			PlayState.instance.startCountdown();
		});
	}

	// create cutscene when song starts

	public override function onCountdownStart(event:CountdownScriptEvent):Void {
		super.onCountdownStart(event);

		if (hasPlayedCutscene && !hasPlayedInGameCutscene) {
			trace('Pausing countdown to play in game cutscene');
			hasPlayedInGameCutscene = true;

			event.cancel(); // CANCEL THE COUNTDOWN!

			PlayState.instance.camHUD.visible = false;
			introCutscene();
		}

		if (!PlayStatePlaylist.isStoryMode) {
			hasPlayedCutscene = true;
			hasPlayedInGameCutscene = true;
		}

		if (!hasPlayedCutscene) {
			trace('Pausing countdown to play a video cutscene (`wf`)');

			hasPlayedCutscene = true;

			event.cancel(); // CANCEL THE COUNTDOWN!

			PlayState.instance.tweenCameraZoom(0.6, 0, true);

			// trace('Adding black background behind cutscene over UI');
			bgSprite = new FunkinSprite(0, 0);
			bgSprite.makeSolidColor(2000, 2500, 0xFF000000);
			bgSprite.cameras = [PlayState.instance.camCutscene]; // Show over the HUD but below the video.
			// this
			bgSprite.zIndex = -10000;
			PlayState.instance.add(bgSprite);
			PlayState.instance.refresh();

			startVideo();
		}
	}

	function startVideo() {
		VideoCutscene.play(Paths.videos('wifeForeverCutscene'));
	}

	// pause thingie thanks nova u tha goat

	function onPause() {
		super.onPause();
		camBorder.visible = false;
	}

	function onResume() {
		super.onResume();
		camBorder.visible = true;
	}

	var frameStep = 0;
	var updateStep = 0;

	function onUpdate(event) {
		super.onUpdate(event);

		if (curBeat < 1) {
			camBorder.alpha = 0;
			targetAlpha = 0;
		}
		camBorder.alpha = MathUtil.coolLerp(camBorder.alpha, targetAlpha, 0.05);
		updateStep++;
		if (updateStep % 4 == 0) {
			frameStep++;
		}
		gradientBorder.alpha = MathUtil.coolLerp(gradientBorder.alpha, 1 / (16 / ((frameStep % 16) + 1)), 0.08);

		// if (candyGradient != null) {
		if (candyEnabled) {
			candyGradient.alpha = MathUtil.coolLerp(candyGradient.alpha, 0.54, 0.1);
			FlxG.state.remove(candyGradient);
			FlxG.state.insert(10000, candyGradient);
		} else if (candyGradient != null) {
			candyGradient.alpha = MathUtil.coolLerp(candyGradient.alpha, 0, 0.1);
		}
		// }
	}

	override function onBeatHit(event) {
		super.onBeatHit(event);

		var skyChar = PlayState.instance.currentStage.getDad();

		curBeat = event.beat;
		// if (event.beat == 90 && bfCanDance) {
		//     PlayState.instance.currentStage.getBoyfriend().playAnimation('dance', true, true);
		//     }
		switch (event.beat) {
			case -4:
				// skyChar.playAnimation('three', true);
			case -3:
				// skyChar.playAnimation('two', true);
			case -2:
				// skyChar.playAnimation('one', true);
			case -1:
				// skyChar.playAnimation('go', true); removed the countdown animations cos they were kinda ugly
			case 72:
				if (PlayState.instance.currentVariation == 'default') {
					PlayState.instance.disableKeys = true;
				}
				if (PlayState.instance.currentVariation == 'erect') {
					candyEnabled = true;
				}
			case 104:
				PlayState.instance.disableKeys = false;
			case 136:
				if (PlayState.instance.currentVariation == 'erect') {
					candyEnabled = false;
				}
			case 264:
				targetAlpha = 1;
			case 333:
				targetAlpha = 0;
				if (PlayStatePlaylist.isStoryMode) {
					FlxTween.tween(bgSprite, {alpha: 1}, 3, {startDelay: 0.3}, function() {
						bgSprite.visible = true;
					});
				}
		}
	} // dont ask wtf i did all i know is tthat it works

	function onSongEvent(event) {
		super.onSongEvent(event);
		switch (event.eventData.eventKind) {
			case "CandyEvent":
				candyEnabled = event.eventData.value.enabled;
		}
	}
}
